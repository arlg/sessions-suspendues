/* ====================
     structural variables
     ==================== */

/* container variables */
$max-container-width: 1366px;
$mobile-padding: 20px;

/* Containers */
$large-container-width: 1024px;
$medium-container-width: 768px;
$small-container-width: 540px;

$mobile-menu-width: $medium-container-width;

/* Media queries du site, l'unité rem rend le zoom accessible et proportionnel à la taille de la typo */
// Exemple :
//	@media(#{$break-max-sm}) {
//	}

$break-max-container-width: "max-width: #{$max-container-width}";
$break-min-container-width: "min-width: #{$max-container-width + 1px}";
$break-max-mobile-menu: "max-width: #{$mobile-menu-width}";

/* Responsive breakpoints */
$break-min-sm: "min-width: #{$small-container-width + 1px}";
$break-min-md: "min-width: #{$medium-container-width + 1px}";
$break-min-lg: "min-width: #{$large-container-width + 1px}";

$break-max-sm: "max-width: #{$small-container-width}";
$break-max-md: "max-width: #{$medium-container-width}";
$break-max-lg: "max-width: #{$large-container-width}";

/* ====================
   containers
   ==================== */

/* mixins */
@mixin container {
	width: 100%;
	max-width: ($max-container-width + 2 * $mobile-padding);
	margin: 0 auto;
	padding: 0 $mobile-padding;
}

/* wrapper div */
.container {
	@include container;

	/*
		On définit ici des nouveaux points pour le .container
		En prenant en compte le padding mobile
	*/
	&--large {
		max-width: ($large-container-width + 2 * $mobile-padding);
	}

	&--medium {
		max-width: ($medium-container-width + 2 * $mobile-padding);
	}

	&--small {
		max-width: ($small-container-width + 2 * $mobile-padding);
	}

	&--content {
		max-width: (1045px + 2 * $mobile-padding);
	}

	&--paddingless {
		padding: 0;
	}

	/* Et on évite de l'appliquer à nouveau aux containers descendants */
	.container {
		padding-right: 0;
		padding-left: 0;
	}
}

/* ====================
   media/embeds
   ==================== */

img,
audio,
video,
canvas,
iframe {
	display: block;
}

svg {
	fill: currentColor;
}
